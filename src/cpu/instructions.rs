use crate::cpu::CPU;
use { Instruction::*, AddressingMode::* };

// https://www.nesdev.org/6502_cpu.txt
// https://www.nesdev.org/wiki/CPU_addressing_modes

#[derive(Debug)]
pub enum Instruction {
    NULL, LAS, ISB, SBX,
    SLO, ANC, RLA, SRE, ASR, RRA, SAX, ARR,
    SHS, ANE, SHA, LAX, LXA, SHX, SHY, DCP,
    ADC, AND, ASL, BCC, BCS, BEQ, BIT, BMI, 
    BPL, BRK, BVC, BVS, CLC, CLD, CLI, CLV, 
    CPX, CPY, DEC, DEX, DEY, EOR, INC, INX, 
    JMP, JSR, LDA, LDX, LDY, LSR, NOP, ORA, 
    PHP, PLA, PLP, ROL, ROR, RTI, RTS, SBC, 
    SED, SEI, STA, STX, STY, TAX, TAY, TSX, 
    TXS, TYA, BNE, CMP, INY, PHA, SEC, TXA, 
}

#[derive(Debug)]
pub enum AddressingMode { 
    Implicit,
    Accumulator,
    Immediate,
    Zeropage,
    ZeropageX,
    ZeropageY,
    Relative,
    Absolute,
    AbsoluteX,
    AbsoluteY,
    Indirect,
    IndirectX,
    IndirectY,
    None
}

#[derive(Debug)]
pub struct OpCode {
    pub inst: Instruction,
    pub ad: AddressingMode
}

// 0x100 = 0xFF + 1(zero)
pub type OpCodes = [OpCode; 0x100];

impl OpCode {
    pub fn run(self, cpu: CPU) -> CPU {
        unimplemented!()
    }
}

pub const OP_CODES: OpCodes = [
    OpCode { inst: BRK, ad: Implicit },           
    OpCode { inst: ORA, ad: IndirectX },      
    OpCode { inst: NULL, ad: None },
    OpCode { inst: SLO, ad: IndirectX },
    OpCode { inst: NOP, ad: Zeropage },
    OpCode { inst: ORA, ad: Zeropage },
    OpCode { inst: ASL, ad: Zeropage },
    OpCode { inst: SLO, ad: Zeropage },
    OpCode { inst: PHP, ad: Implicit },
    OpCode { inst: ORA, ad: Immediate },
    OpCode { inst: ASL, ad: Accumulator },
    OpCode { inst: ANC, ad: Immediate },
    OpCode { inst: NOP, ad: Absolute },
    OpCode { inst: ORA, ad: Absolute },
    OpCode { inst: ASL, ad: Absolute },
    OpCode { inst: SLO, ad: Absolute },
    OpCode { inst: BPL, ad: Relative },
    OpCode { inst: ORA, ad: IndirectY },
    OpCode { inst: NULL, ad: None },
    OpCode { inst: SLO, ad: IndirectY },
    OpCode { inst: NOP, ad: ZeropageX },
    OpCode { inst: ORA, ad: ZeropageX },
    OpCode { inst: ASL, ad: ZeropageX },
    OpCode { inst: SLO, ad: ZeropageX },
    OpCode { inst: CLC, ad: Implicit },
    OpCode { inst: ORA, ad: AbsoluteY },
    OpCode { inst: NOP, ad: Implicit },
    OpCode { inst: SLO, ad: AbsoluteY },
    OpCode { inst: NOP, ad: AbsoluteX },
    OpCode { inst: ORA, ad: AbsoluteX },
    OpCode { inst: ASL, ad: AbsoluteX },
    OpCode { inst: SLO, ad: AbsoluteX },
    OpCode { inst: JSR, ad: Absolute },
    OpCode { inst: AND, ad: IndirectX },
    OpCode { inst: NULL, ad: None },
    OpCode { inst: RLA, ad: IndirectX },
    OpCode { inst: BIT, ad: Zeropage },
    OpCode { inst: AND, ad: Zeropage },
    OpCode { inst: ROL, ad: Zeropage },
    OpCode { inst: RLA, ad: Zeropage },
    OpCode { inst: PLP, ad: Implicit },
    OpCode { inst: AND, ad: Immediate },
    OpCode { inst: ROL, ad: Accumulator },
    OpCode { inst: ANC, ad: Immediate },
    OpCode { inst: BIT, ad: Absolute },
    OpCode { inst: AND, ad: Absolute },
    OpCode { inst: ROL, ad: Absolute },
    OpCode { inst: RLA, ad: Absolute },
    OpCode { inst: BMI, ad: Relative },
    OpCode { inst: AND, ad: IndirectY },
    OpCode { inst: NULL, ad: None },
    OpCode { inst: RLA, ad: IndirectY },
    OpCode { inst: NOP, ad: ZeropageX },
    OpCode { inst: AND, ad: ZeropageX },
    OpCode { inst: ROL, ad: ZeropageX },
    OpCode { inst: RLA, ad: ZeropageX },
    OpCode { inst: SEC, ad: Implicit },
    OpCode { inst: AND, ad: AbsoluteY },
    OpCode { inst: NOP, ad: Implicit },
    OpCode { inst: RLA, ad: AbsoluteY },
    OpCode { inst: NOP, ad: AbsoluteX },
    OpCode { inst: AND, ad: AbsoluteX },
    OpCode { inst: ROL, ad: AbsoluteX },
    OpCode { inst: RLA, ad: AbsoluteX },
    OpCode { inst: RTI, ad: Implicit },
    OpCode { inst: EOR, ad: IndirectX },
    OpCode { inst: NULL, ad: None },
    OpCode { inst: SRE, ad: IndirectX },
    OpCode { inst: NOP, ad: Zeropage },
    OpCode { inst: EOR, ad: Zeropage },
    OpCode { inst: LSR, ad: Zeropage },
    OpCode { inst: SRE, ad: Zeropage },
    OpCode { inst: PHA, ad: Implicit },
    OpCode { inst: EOR, ad: Immediate },
    OpCode { inst: LSR, ad: Accumulator },
    OpCode { inst: ASR, ad: Immediate },
    OpCode { inst: JMP, ad: Absolute },
    OpCode { inst: EOR, ad: Absolute },
    OpCode { inst: LSR, ad: Absolute },
    OpCode { inst: SRE, ad: Absolute },
    OpCode { inst: BVC, ad: Relative },
    OpCode { inst: EOR, ad: IndirectY },
    OpCode { inst: NULL, ad: None },
    OpCode { inst: SRE, ad: IndirectY },
    OpCode { inst: NOP, ad: ZeropageX },
    OpCode { inst: EOR, ad: ZeropageX },
    OpCode { inst: LSR, ad: ZeropageX },
    OpCode { inst: SRE, ad: ZeropageX },
    OpCode { inst: CLI, ad: Implicit },
    OpCode { inst: EOR, ad: AbsoluteY },
    OpCode { inst: NOP, ad: Implicit },
    OpCode { inst: SRE, ad: AbsoluteY },
    OpCode { inst: NOP, ad: AbsoluteX },
    OpCode { inst: EOR, ad: AbsoluteX },
    OpCode { inst: LSR, ad: AbsoluteX },
    OpCode { inst: SRE, ad: AbsoluteX },
    OpCode { inst: RTS, ad: Implicit },
    OpCode { inst: ADC, ad: IndirectX },
    OpCode { inst: NULL, ad: None },
    OpCode { inst: RRA, ad: IndirectX },
    OpCode { inst: NOP, ad: Zeropage },
    OpCode { inst: ADC, ad: Zeropage },
    OpCode { inst: ROR, ad: Zeropage },
    OpCode { inst: RRA, ad: Zeropage },
    OpCode { inst: PLA, ad: Implicit },
    OpCode { inst: ADC, ad: Immediate },
    OpCode { inst: ROR, ad: Accumulator },
    OpCode { inst: ARR, ad: Immediate },
    OpCode { inst: JMP, ad: Indirect },
    OpCode { inst: ADC, ad: Absolute },
    OpCode { inst: ROR, ad: Absolute },
    OpCode { inst: RRA, ad: Absolute },
    OpCode { inst: BVS, ad: Relative },
    OpCode { inst: ADC, ad: IndirectY },
    OpCode { inst: NULL, ad: None },
    OpCode { inst: RRA, ad: IndirectY },
    OpCode { inst: NOP, ad: ZeropageX },
    OpCode { inst: ADC, ad: ZeropageX },
    OpCode { inst: ROR, ad: ZeropageX },
    OpCode { inst: RRA, ad: ZeropageX },
    OpCode { inst: SEI, ad: Implicit },
    OpCode { inst: ADC, ad: AbsoluteY },
    OpCode { inst: NOP, ad: Implicit },
    OpCode { inst: RRA, ad: AbsoluteY },
    OpCode { inst: NOP, ad: AbsoluteX },
    OpCode { inst: ADC, ad: AbsoluteX },
    OpCode { inst: ROR, ad: AbsoluteX },
    OpCode { inst: RRA, ad: AbsoluteX },
    OpCode { inst: NOP, ad: Immediate },
    OpCode { inst: STA, ad: IndirectX },
    OpCode { inst: NOP, ad: Immediate }, // *t
    OpCode { inst: SAX, ad: IndirectX },
    OpCode { inst: STY, ad: Zeropage },
    OpCode { inst: STA, ad: Zeropage },
    OpCode { inst: STX, ad: Zeropage },
    OpCode { inst: SAX, ad: Zeropage },
    OpCode { inst: DEY, ad: Implicit },
    OpCode { inst: NOP, ad: Immediate },
    OpCode { inst: TXA, ad: Implicit },
    OpCode { inst: ANE, ad: Immediate },
    OpCode { inst: STY, ad: Absolute },
    OpCode { inst: STA, ad: Absolute },
    OpCode { inst: STX, ad: Absolute },
    OpCode { inst: SAX, ad: Absolute },
    OpCode { inst: BCC, ad: Relative },
    OpCode { inst: STA, ad: IndirectY },
    OpCode { inst: NULL, ad: None },
    OpCode { inst: SHA, ad: IndirectY },
    OpCode { inst: STY, ad: ZeropageX },
    OpCode { inst: STA, ad: ZeropageX },
    OpCode { inst: STX, ad: ZeropageY },
    OpCode { inst: SAX, ad: ZeropageY },
    OpCode { inst: TYA, ad: Implicit },
    OpCode { inst: STA, ad: AbsoluteY },
    OpCode { inst: TXS, ad: Implicit },
    OpCode { inst: SHS, ad: AbsoluteY },
    OpCode { inst: SHY, ad: AbsoluteX },
    OpCode { inst: STA, ad: AbsoluteX },
    OpCode { inst: SHX, ad: AbsoluteY },
    OpCode { inst: SHA, ad: AbsoluteY },
    OpCode { inst: LDY, ad: Immediate },
    OpCode { inst: LDA, ad: IndirectX },
    OpCode { inst: LDX, ad: Immediate },
    OpCode { inst: LAX, ad: IndirectX },
    OpCode { inst: LDY, ad: Zeropage },
    OpCode { inst: LDA, ad: Zeropage },
    OpCode { inst: LDX, ad: Zeropage },
    OpCode { inst: LAX, ad: Zeropage },
    OpCode { inst: TAY, ad: Implicit },
    OpCode { inst: LDA, ad: Immediate },
    OpCode { inst: TAX, ad: Implicit },
    OpCode { inst: LXA, ad: Immediate },
    OpCode { inst: LDY, ad: Absolute },
    OpCode { inst: LDA, ad: Absolute },
    OpCode { inst: LDX, ad: Absolute },
    OpCode { inst: LAX, ad: Absolute },
    OpCode { inst: BCS, ad: Relative },
    OpCode { inst: LDA, ad: IndirectY },
    OpCode { inst: NULL, ad: None },
    OpCode { inst: LAX, ad: IndirectY },
    OpCode { inst: LDY, ad: ZeropageX },
    OpCode { inst: LDA, ad: ZeropageX },
    OpCode { inst: LDX, ad: ZeropageY },
    OpCode { inst: LAX, ad: ZeropageY },
    OpCode { inst: CLV, ad: Implicit },
    OpCode { inst: LDA, ad: AbsoluteY },
    OpCode { inst: TSX, ad: Implicit },
    OpCode { inst: LAS, ad: AbsoluteY },
    OpCode { inst: LDY, ad: AbsoluteX },
    OpCode { inst: LDA, ad: AbsoluteX },
    OpCode { inst: LDX, ad: AbsoluteY },
    OpCode { inst: LAX, ad: AbsoluteY },
    OpCode { inst: CPY, ad: Immediate },
    OpCode { inst: CMP, ad: IndirectX },
    OpCode { inst: NOP, ad: Immediate }, // *t
    OpCode { inst: DCP, ad: IndirectX },
    OpCode { inst: CPY, ad: Zeropage },
    OpCode { inst: CMP, ad: Zeropage },
    OpCode { inst: DEC, ad: Zeropage },
    OpCode { inst: DCP, ad: Zeropage },
    OpCode { inst: INY, ad: Implicit },
    OpCode { inst: CMP, ad: Immediate },
    OpCode { inst: DEX, ad: Implicit },
    OpCode { inst: SBX, ad: Immediate },
    OpCode { inst: CPY, ad: Absolute },
    OpCode { inst: CMP, ad: Absolute },
    OpCode { inst: DEC, ad: Absolute },
    OpCode { inst: DCP, ad: Absolute },
    OpCode { inst: BNE, ad: Relative },
    OpCode { inst: CMP, ad: IndirectY },
    OpCode { inst: NULL, ad: None },
    OpCode { inst: DCP, ad: IndirectY },
    OpCode { inst: NOP, ad: ZeropageX },
    OpCode { inst: CMP, ad: ZeropageX },
    OpCode { inst: DEC, ad: ZeropageX },
    OpCode { inst: DCP, ad: ZeropageX },
    OpCode { inst: CLD, ad: Implicit },
    OpCode { inst: CMP, ad: AbsoluteY },
    OpCode { inst: NOP, ad: Implicit },
    OpCode { inst: DCP, ad: AbsoluteY },
    OpCode { inst: NOP, ad: AbsoluteX },
    OpCode { inst: CMP, ad: AbsoluteX },
    OpCode { inst: DEC, ad: AbsoluteX },
    OpCode { inst: DCP, ad: AbsoluteX },
    OpCode { inst: CPX, ad: Immediate },
    OpCode { inst: SBC, ad: IndirectX },
    OpCode { inst: NOP, ad: Immediate }, // *t 
    OpCode { inst: ISB, ad: IndirectX },
    OpCode { inst: CPX, ad: Zeropage },
    OpCode { inst: SBC, ad: Zeropage },
    OpCode { inst: INC, ad: Zeropage },
    OpCode { inst: ISB, ad: Zeropage },
    OpCode { inst: INX, ad: Implicit },
    OpCode { inst: SBC, ad: Immediate },
    OpCode { inst: NOP, ad: Implicit },
    OpCode { inst: SBC, ad: Immediate },
    OpCode { inst: CPX, ad: Absolute },
    OpCode { inst: SBC, ad: Absolute },
    OpCode { inst: INC, ad: Absolute },
    OpCode { inst: ISB, ad: Absolute },
    OpCode { inst: BEQ, ad: Relative },
    OpCode { inst: SBC, ad: IndirectY },
    OpCode { inst: NULL, ad: None },
    OpCode { inst: ISB, ad: IndirectY },
    OpCode { inst: NOP, ad: ZeropageX },
    OpCode { inst: SBC, ad: ZeropageX },
    OpCode { inst: INC, ad: ZeropageX },
    OpCode { inst: ISB, ad: ZeropageX },
    OpCode { inst: SED, ad: Implicit },
    OpCode { inst: SBC, ad: AbsoluteY },
    OpCode { inst: NOP, ad: Implicit },
    OpCode { inst: ISB, ad: AbsoluteY },
    OpCode { inst: NOP, ad: AbsoluteX },
    OpCode { inst: SBC, ad: AbsoluteX },
    OpCode { inst: INC, ad: AbsoluteX },
    OpCode { inst: ISB, ad: AbsoluteX }
];